name: ci

on:
  workflow_dispatch:
    inputs:
      runSonar:
        description: 'Run Sonar'
        type: boolean
        required: true
        default: true
      runBuild:
        description: 'Run Build'
        type: boolean
        required: true
        default: true
      pushDockerImage:
        description: 'Push Docker Image'
        type: boolean
        required: true
        default: true
      runIntegrationTests:
        description: 'Run Integration Tests'
        type: boolean
        required: true
        default: true

jobs:

  init:
    runs-on: ubuntu-latest
    outputs:
      dockerhubusername: ${{ steps.step1.outputs.output }}
      imagename: ${{ steps.step2.outputs.output }}
    steps:
      - id: step1
        run: echo "output=marcelocas" >> $GITHUB_OUTPUT
      - id: step2
        run: echo "output=marcelocas/mcb_demos_shopdemo_monolithic:${{github.run_id}}" >> $GITHUB_OUTPUT

  sonar:
    
    needs: init
    
    runs-on: ubuntu-latest
    if: ${{inputs.runSonar == true}} 

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x

    - name: Install Sonar Scanner
      shell: pwsh
      run: |
        New-Item -Path ./.sonar/scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build And Test
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"MarceloCas_MCB.Demos.ShopDemo.Monolithic" /o:"marcelocas" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml" /d:sonar.coverage.exclusions="tst/**,**/Migrations/**" /d:sonar.exclusions="tst/**,**/Migrations/**"
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover ./tst/Demos.ShopDemo.Monolithic.Tests.UnitTests/Demos.ShopDemo.Monolithic.Tests.UnitTests.csproj
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
  
  build:
  
    needs: [init, sonar]

    runs-on: ubuntu-latest
    if: ${{inputs.runBuild == true}}

    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Build Docker Image
      shell: pwsh
      run: |
        docker build . --file Dockerfile -t ${{ needs.init.outputs.imagename }}
    
    - name: Login Docker HUB
      if: ${{inputs.pushDockerImage == true}}
      shell: pwsh
      run: |
        docker login -u ${{needs.init.outputs.dockerhubusername}} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Push Docker Image
      if: ${{inputs.pushDockerImage == true}}
      shell: pwsh
      run: |
        docker push ${{ needs.init.outputs.imagename }}

  integration-tests:

    needs: [init, build]
    if: ${{inputs.runIntegrationTests == true}}
    runs-on: ubuntu-latest
            
    steps:

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Run Prometheus Container
      uses: docker://prom/prometheus:latest
      with:
        args: --config.file=prometheus.yaml

    - name: Setup .NET 7
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        dotnet build --no-restore

    - name: Apply Migration
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        dotnet tool install --global dotnet-ef
        dotnet ef database update -p ./src/MCB.Demos.ShopDemo.Monolithic.Infra.Data -- "${{ secrets.MIGRATION_POSTGRES_CONNECTION_STRING }}"

    - name: Integration Tests
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        dotnet test --no-build ./tst/Demos.ShopDemo.Monolithic.Tests.IntegrationTests/Demos.ShopDemo.Monolithic.Tests.IntegrationTests.csproj

